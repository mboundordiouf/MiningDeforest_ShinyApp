# Libraries ----
rm(list = ls())
 library(shiny)
 library(shinydashboard)
 library(shinyjs)
library(tidyverse)



library(did2s)
library(haven)
#library(Statamarkdown)

library(haven)
library(stargazer)
library(did)
library(jtools)
library(huxtable)
library(flextable)
library(ggstance)
library(broom.mixed)

# Initialize Data ----
#######################

df <- haven::read_dta("C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\DataOnly_FOREST.dta") 
df$chc_year_exp<- df$authyear
df$fips<-df$gid
df$rel_year<-df$tau
#############
df_het <- df
data.table::setDT(df_het)
df_het$disc_year <-df_het$authyear

df_het[, g := data.table::fifelse(is.na(disc_year), -Inf, disc_year)]
# df_het[, rel_year := data.table::fifelse(is.na(year_relative), Inf, year_relative)]

# Apply the log transformation
df_het$log_nlights_mean <-  log(df_het$nlights_mean +1)

 Var  <- c( "TDefo", "neglog_Deforest", "log_nlights_mean")
# Var  <- c( "TDefo", "neglog_Deforest")

dat  <- df_het
########################
df_spill<-haven::read_dta("C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Grid_def_spill_MinesData_Cool_OnlyFOREST.dta")
df_spill$authyear <-df_spill$year_within_25
df_spill$tau <-df_spill$spill_rel_year_SUNAB

df_spill_drop_cont<-haven::read_dta("C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Grid_def_spill_MinesData_Cool_drop_spill_conrol_Only_Forest.dta")

##################Buffer Zone####################################
# List of file paths
file_paths <- c(
  "C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Data_Buffers10_country.dta",
  "C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Data_Buffers10_20_country.dta",
  "C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Data_Buffers20_30_country.dta",
  "C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Data_Buffers30_40_country.dta",
  "C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Data_Buffers40_50_country.dta",
  "C:\\Users\\diouf\\Dropbox\\githubUploads\\MiningDeforest_ShinyApp\\data\\Data_Buffers50_70_country.dta"
)

# Read data files into a list of data frames
data_frames <- lapply(file_paths, read_dta)

# Assign names to the list based on your variable names
names(data_frames) <- c("Buffer10", "Buffer10_20", "Buffer20_30", "Buffer30_40", "Buffer40_50", "Buffer50_70")

# Optionally, if you want to create separate variables for each data frame in the global environment
 list2env(data_frames, envir = .GlobalEnv)
 
 library(dplyr)

#############Direct and indirect effect at cell level SUNab###########################
 
 # ---- Modern Event Study ------------------------------------------------------
 
 # es <-feols(TDefo ~ 0 + sunab(authyear, tau) | gid + Year,cluster = ~gid, df_spill_drop_cont)
 # 
 # 
 #  es_3 <-feols(TDefo ~ 0 + sunab(authyear, tau ) | gid + Year,cluster = ~gid, df_spill)
 # 
 # iplot(list(es_3, es), ylim = c(-0.5,1), xlim = c(-8.5,14.5),sep = 0.2,xlab = "Before/After mine discovering", ylab = "Deforestation rate (%)")
 # legend("topleft", col = c(1,  2), pch = c(20, 17),
 #        legend = c("Spillover On Control (Sun & Abraham (2020))","Treatment Effect (Sun & Abraham (2020))"))
 # 
 # 
 
 
 
 
 
 

# UI ----
ui <- dashboardPage(
  
  #### Header ----
  dashboardHeader(
    title = "Mining and Deforestation in Africa 2001-2018",
    titleWidth = 350
  ),
  #### Sidebar ----
  dashboardSidebar(
    sidebarMenu(
    width = 350,
    br(),
    h4("Select Your Inputs Here", style = "padding-left:20px"),
    #####Direct  
    # deforest Input ----
    selectInput(
      inputId = "deforest", 
      label= strong("Direct: deforest", style= "front-family: 'arial'; font-size: 12px"),
      choices= Var,
      selected = Var[1]),
    
    # Buffer ZONE Input ----
    
    # selectInput(
    #   inputId = "deforest_buffer",
    #   label= strong("Distance: Buffer Zone", style= "front-family: 'arial'; font-size: 12px"),
    #   choices= data_frames,
    #   selected = data_frames[1]),
    # 
    
    
    # Input: Choose dataset ----
    selectInput(
                inputId = "dataset",
                label= strong("dataset, Choose a dataset:", style= "front-family: 'arial'; font-size: 12px"),
               choices = c("Buffer10", "Buffer10_20", "Buffer20_30", "Buffer30_40", "Buffer40_50", "Buffer50_70"),
               multiple=F, selected = "Buffer10"),
    
    # Input: Choose dataset ----
    selectInput(
      inputId = "Data_DIndirect",
      label= strong("Direct and Indirect cells, Choose a dataset:", style= "front-family: 'arial'; font-size: 12px"),
      choices = c("df_spill_drop_cont", "df_spill"),
      multiple=F, selected = "df_spill_drop_cont")
    
 )),
 

 

 
 
  #### Body ----
  dashboardBody(
    fluidRow( 
      ## Direct effects ---- 
      box(
        title = "Mining cells: deforest Results", status = "primary", solidHeader = TRUE, collapsible = TRUE,
        plotOutput("plotdata_deforest")
      ),
      ##Buufer Zone
      box(
        title = "Direct and Indirect cells: Results", status = "primary", solidHeader = TRUE, 
        collapsible = TRUE, 
        plotOutput("plotdata_Direct_Indirect_Cell"))   
      
    ),
    
    fluidRow( 
      ##Buffer data
       box(
        title = "table: Buffer zone", status = "primary", solidHeader = TRUE, 
        collapsible = TRUE, 
        tableOutput("table")
         ) ,
       ##Buufer Zone
       box(
         title = "Distance: Buffer zone Results", status = "primary", solidHeader = TRUE, 
         collapsible = TRUE, 
         plotOutput("plotdata_Bufferr"))
       
      
    ),  
    
  )
)

server <- function(input, output) {

  # Direct and Indirect Estimation ----
  output$plotdata_Direct_Indirect_Cell <- renderPlot({
    selectedData_DI <- input$Data_DIndirect
    Data_DI <- get(selectedData_DI)
    
  Results <-feols(TDefo ~ 0 + sunab(authyear, tau) | gid + Year,cluster = ~gid, Data_DI)
  

  iplot(Results, ylim = c(-0.5,1), xlim = c(-8.5,14.5),sep = 0.2,xlab = "Before/After mine discovering", ylab = "Deforestation rate (%)")
  legend("topleft", col =  1, pch =  20,
         legend = selectedData_DI)
  
  
  })
  
    # Buffer zone Estimation ----
  output$plotdata_Bufferr <- renderPlot({
    selectedDataset <- input$dataset
    happinessdata <- get(selectedDataset)
    
    buffer_list <- feols(TDefo ~ 0 + sunab(authyear, Year) | ADM01_3_ID + ID_country + Year, cluster = ~ADM01_3_ID, happinessdata)
    
    # Buffer zone Plotting ----
    iplot(buffer_list, sep = 0.1, ylab = "Deforestation rate (%)", xlab = "Before/After mine discovering",
          ylim = c(-0.5, 1), xlim = c(-8.5, 14.5), main = "Distance from the mine")
    
    # Legend
    legend("topleft", col = seq_along(buffer_list), pch = 20,
           legend = selectedDataset)
  })
  
  


  # # Reactive value for selected dataset ----
  # datasetInput <- reactive({
  #   switch(input$dataset,
  #          "Buffer10"=Buffer10, "Buffer10_20"=Buffer10_20, "Buffer20_30"=Buffer20_30, "Buffer30_40"=Buffer30_40, "Buffer40_50"=Buffer40_50, "Buffer50_70"=Buffer50_70
  #         )
  # })
  # 
  # # Table of selected dataset ----
  # output$table <- renderTable({
  #   datasetInput()
  # })




  # #Direct effects
  # Incidence Estimation ----
  output$plotdata_deforest<-    renderPlot({

    deforest = event_study(
      data =dat , yname = input$deforest, idname = "fips",
      tname = "Year", gname = "disc_year",estimator = "all"
    )

    # Incidence Plotting ----
    plot_event_study(deforest, horizon = c(-10, 15))

    # ggtitle( metric_names[which(metric_choices==input$metric)])

   })


  
}

shinyApp(ui, server)

